#!python
""" 
   Program that shows the program on the right and its abstract syntax tree (ast) on the left.
"""
from __future__ import print_function

import sys
import argparse
import logging

from PySide import QtGui

import ast_viewer.ast_tool_box as ast_tool_box


logger = logging.getLogger(__name__)

        
def main():
    """ Main program to test stand alone 
    """
    app = QtGui.QApplication(sys.argv) # to allow for Qt command line arguments
    remaining_argv = app.arguments()
    
    parser = argparse.ArgumentParser(description='Python abstract syntax tree viewer and transformer')
    parser.add_argument('file_name', help='Python input file')
    parser.add_argument('packages', metavar='P', nargs='*')

    parser.add_argument(
        '-l', '--log-level', dest='log_level', default='warn',
        choices=('debug', 'info', 'warn', 'error', 'critical'),
        help="Log level. Only log messages with a level higher or equal than this "
             "will be printed. Default: 'warn'"
    )

    args = parser.parse_args(args = remaining_argv[1:])

    ast_tool_box.logging_basic_config(args.log_level.upper())

    logger.info('Started {}'.format(ast_tool_box.PROGRAM_NAME))

    exit_code = ast_tool_box.view(
        file_name=args.file_name,
        packages=args.packages,
        width=1100, height=800
    )

    logging.info('Done {}'.format(ast_tool_box.PROGRAM_NAME))
    sys.exit(exit_code)


if __name__ == '__main__':
    main()
