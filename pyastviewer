#!python
""" 
   Program that shows the program on the right and its abstract syntax tree (ast) on the left.
"""
from __future__ import print_function

import sys
import argparse
import logging

from PySide import QtGui

from ast_viewer import astviewer


logger = logging.getLogger(__name__)

        
def main():
    """ Main program to test stand alone 
    """
    app = QtGui.QApplication(sys.argv) # to allow for Qt command line arguments
    remaining_argv = app.arguments()
    
    parser = argparse.ArgumentParser(description='Python abstract syntax tree viewer')
    parser.add_argument(dest='file_name', help='Python input file', nargs='?')
    parser.add_argument('-m', '--mode', dest='mode', default = 'exec',
        choices = ('exec', 'eval', 'single'),  
        help = """The mode argument specifies what kind of code must be compiled; 
            it can be 'exec' if source consists of a sequence of statements, 
            'eval' if it consists of a single expression, or 'single' if it 
            consists of a single interactive statement (in the latter case, 
            expression statements that evaluate to something other than None 
            will be printed). """)    
    parser.add_argument('-l', '--log-level', dest='log_level', default = 'warn', 
        choices = ('debug', 'info', 'warn', 'error', 'critical'),                      
        help = "Log level. Only log messages with a level higher or equal than this "
            "will be printed. Default: 'warn'")

    
    args = parser.parse_args(args = remaining_argv[1:])

    astviewer.logging_basic_config(args.log_level.upper())

    logger.info('Started {}'.format(astviewer.PROGRAM_NAME))
    exit_code = astviewer.view(file_name=args.file_name, mode = args.mode,
                               width=1100, height=800)
    logging.info('Done {}'.format(astviewer.PROGRAM_NAME))
    sys.exit(exit_code)


if __name__ == '__main__':
    main()
